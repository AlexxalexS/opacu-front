@page "/images"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager navigationManager
@inject HttpClient Http

<a href="/users">
    <BSButton Size="Size.Small" Color="Color.Primary"><span class="oi oi-arrow-thick-left"></span> Назад</BSButton>
</a>
<br/><br/>

<h3>Картинки пользователя @nameParse</h3>

@if (imageFiles == null)
{
<p><em>Загрузка...</em></p>
}
else
{
    @if (imageFiles.Count > 0)
    {
        <BSTable IsBordered="true" class="table">
            <thead>
            <tr>
                <th/>
                <th>Название</th>
                <th>Описание</th>
                <th>Разрешение</th>
                <th>Цветовой профиль</th>
                <th>Размер</th>
                <th>ID</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var image in imageFiles)
            {
                <tr>
                    <td><img src="https://localhost:5000/@image.File.Path" height="300px"/></td>
                    <td>@image.File.Title</td>
                    <td>@image.File.Description</td>
                    <td>@image.Resolution</td>
                    <td>@image.ColorPalette</td>
                    <td>@image.File.Size</td>
                    <td>@image.Id</td>
                </tr>
            }
            </tbody>
        </BSTable>
    } else 
    {
        <h1>Вы еще не загрузили картинки</h1>
    }
}

@code {
    private string idPars;
    private string nameParse;
    private List<ImageFile> imageFiles;
    
    protected override async Task OnInitializedAsync()
    {
        
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
        {
            idPars = id.First();
        }

        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("name", out var name))
        {
            nameParse = name.First();
        }
        
        string url = $"{Program.apiURL}/users/" + idPars + "/image-files";
        
        imageFiles = await Http.GetFromJsonAsync<List<ImageFile>>(url);
    }

    public class ImageFile
    {
        public Guid Id { get; set; }
        
        public string Resolution { get; set; }
        
        public string ColorPalette { get; set; }

        public UserFiles.File File { get; set; }
    }
    
}