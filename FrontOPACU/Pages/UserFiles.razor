@page "/user-files"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager navigationManager
@inject HttpClient Http


<a href="/users">
    <BSButton Size="Size.Small" Color="Color.Primary"><span class="oi oi-arrow-thick-left"></span> Назад</BSButton>
</a>
<br/><br/>

<h3>Все файлы пользователя: <span style="text-decoration: underline">@nameParse</span></h3>

Показать только фалы типа:
<a href="/music?id=@idPars&name=@nameParse">
    <BSButton Size="Size.Small" IsOutline="true" Color="Color.Info">Музыка</BSButton> |
</a>

<a href="/docs?id=@idPars&name=@nameParse">
    <BSButton Size="Size.Small" IsOutline="true" Color="Color.Info">Документы</BSButton> |
</a>

<a href="/videos?id=@idPars&name=@nameParse">
    <BSButton Size="Size.Small" IsOutline="true" Color="Color.Info">Видео</BSButton> |
</a>

<a href="/images?id=@idPars&name=@nameParse">
    <BSButton Size="Size.Small" IsOutline="true" Color="Color.Info">Картинки</BSButton>
</a>

<br>
<br>
<hr>

@if (allUserFiles == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    @if (allUserFiles.Count > 0)
    {
        <BSTable IsBordered="true" class="table">
            <thead>
            <tr>
                <th>Имя</th>
                <th>Фамилия</th>
                <th>Формат</th>
                <th>Это:</th>
                <th>Размер</th>
                <th>Дата создания</th>
                <th>Дата изменения</th>
                <th>ID</th>
                <th>Удалить</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var file in allUserFiles)
            {
                <tr>
                    
                    <td>@file.Title</td>
                    <td>@file.Description</td>
                    <td>@file.Format</td>
                    <td>
                        @switch (file.Format)
                        {
                            case "image/png":
                                <span class="oi oi-image"></span>
                                break;
                            case "image/jpeg":
                                <span class="oi oi-image"></span>
                                break;
                            case "image/svg+xml":
                                <span class="oi oi-image"></span>
                                break;
                            case "video/mp4":
                                <span class="oi oi-video"></span>
                                break;
                            case "audio/mpeg":
                                <span class="oi oi-audio-spectrum"></span>
                                break;
                            case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                                <span class="oi oi-document"></span>
                                break;
                            case "text/rtf":
                                <span class="oi oi-document"></span>
                                break;
                            case "text/plain":
                                <span class="oi oi-document"></span>
                                break;
                            default:
                                <span class="oi oi-ban"></span>
                                break;
                        }
                    </td>
                    
                    <td>@file.Size</td>
                    <td>@file.CreatedAt</td>
                    <td>@file.UpdatedAt</td>
                    <td>@file.Id</td>
                    <td>
                        <BSButton Color="Color.Danger"@onclick="(() => DeleteFile(file))">
                            <span class="oi oi-delete delete"></span>
                        </BSButton>
                    </td>
                    
                </tr>
            }
            </tbody>
        </BSTable>
    }
    else
    {
        <h1>Вы еще не загрузили файлы</h1>
    }
    
}

@code {
    private string idPars;
    private string nameParse;
    private List<File> allUserFiles;
    private File temp;
    
    protected override async Task OnInitializedAsync()
    {
        
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
        {
             idPars = id.First();
        }

        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("name", out var name))
        {
            nameParse = name.First();
        }
        
        string url = $"{Program.apiURL}/users/" + idPars + "/files";
        
        allUserFiles = await Http.GetFromJsonAsync<List<File>>(url);
    }
    
    private async void DeleteFile(File file)
    {
       
        try
        {
            var response = await Http.DeleteAsync($"{Program.apiURL}/users/" + idPars + "/files/" + file.Id).ConfigureAwait(false);
            
            if (response.IsSuccessStatusCode)
            {
                string url = $"{Program.apiURL}/users/" + idPars + "/files";
                allUserFiles = await Http.GetFromJsonAsync<List<File>>(url);
                StateHasChanged();
            }
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
        
    public class File
    {
        public Guid Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public string Format { get; set; }
        public float Size { get; set; }
        public string Path { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
        public Guid UserId{ get; set; }
        public virtual Users.User User { get; set; }
    }

}