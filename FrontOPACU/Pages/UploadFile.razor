@page "/add-new-file"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager navigationManager
@using System.Linq
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject ILogger<UploadFile> Logger

<a href="/users">
    <BSButton Size="Size.Small" Color="Color.Primary"><span class="oi oi-arrow-thick-left"></span> Назад</BSButton>
</a>
<br/><br/>

<h1>Загрузка файлов</h1>
<br/><br/>

<p>
    <BSForm Model="@newFile"  OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <BSFormGroup>
            <BSLabel For="title">Введите имя файла:</BSLabel>
            <BSInput Id="title" InputType="InputType.Text" @bind-Value="newFile.Title" />
        </BSFormGroup>
    

        <BSFormGroup>
            <BSLabel For="description">Введите описание файла файла:</BSLabel>
            <BSInput Id="description" InputType="InputType.Text" @bind-Value="newFile.Description" />
        </BSFormGroup>

        <BSFormGroup>
            <BSLabel For="file"> Загрузите файл:</BSLabel>
            <InputFile id="file" OnChange="@OnInputFileChange" />
        </BSFormGroup>
        <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit">Создать</BSButton>
        
        <BSButton OnClick="(() => ClearForm())" Color="Color.Primary" ButtonType="ButtonType.Reset">Сброс</BSButton>
   
    </BSForm>
</p>

@if (isSendOk)
{
    <BSAlert Color="Color.Success">
        Фаил загружен успешно!
    </BSAlert>  
}

@if (isSendError)
{
    <BSAlert Color="Color.Danger">
       Произошла ошибко :(
    </BSAlert>  
}



@if (files.Count > 0)
{
    <div class="card">
        <div class="card-body">
            <ul>
                @foreach (var file in files)
                {
                    <li>
                        Файл: @file.Name
                        <br>
                        @if (FileUpload(uploadResults, file.Name,
                           out var result))
                        {
                            <span>
                                Stored File Name: @result.StoredFileName
                            </span>
                        }
                        @if (@result.ErrorCode !=0)
                        {
                            <span>
                               Не загружен
                                (Ошибка: @result.ErrorCode).
                            </span>
                        }
                    </li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private string idUser;
    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 3;
    private bool shouldRender;
    private FileUploadModel newFile = new();
    private MultipartFormDataContent content = new MultipartFormDataContent();
    private bool upload = false;
    protected override bool ShouldRender() => shouldRender;

    private bool isSendOk = false;
    private bool isSendError = false;
    
    protected override async Task OnInitializedAsync()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);

        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
        {
            idUser = id.First();
        }
    }
    
    private void ClearForm()
    {
        isSendOk = false;
        isSendError = false;
        upload = false;
        files.Clear();
        uploadResults.Clear();
        newFile = new();
        content = new MultipartFormDataContent();
        
        StateHasChanged();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 1024 * 100;
        
        shouldRender = false;
        upload = false;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                    files.Add(new() { Name = file.Name });

                    content.Add(
                        content: fileContent,
                        name: "\"file\"",
                        fileName: file.Name);
                    
                    upload = true;
                    
                }
                catch (Exception ex)
                {
                    Logger.LogInformation(
                        "{FileName} not uploaded (Err: 6): {Message}", 
                        file.Name, ex.Message);
                }
            }
        }

        shouldRender = true;
        
    }

    private async Task HandleValidSubmit()
    {
        content.Add(new StringContent(newFile.Title), "title");
        content.Add(new StringContent(newFile.Description), "description");

        if (upload)
        {

            try
            {
                var response = await Http.PostAsync($"{Program.apiURL}/users/" + idUser + "/files", content).ConfigureAwait(false);

                if (response.IsSuccessStatusCode)
                {
                    isSendOk = true;
                    isSendError = false;
                }
                
            }
            catch(HttpRequestException e)
            {
                isSendOk = false;
                isSendError = true;
            }
            
            
        }
        
    }

    private static bool FileUpload(IList<UploadResult> uploadResults, string? fileName, out UploadResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
        }

        return result.Uploaded;
    }

    private class File
    {
        public string? Name { get; set; }
    }

    public class UploadResult
    {
        public bool Uploaded { get; set; }
        public string FileName { get; set; }
        public string StoredFileName { get; set; }
        public int ErrorCode { get; set; }
    }

    private class FileUploadModel
    {
        public string Title { get; set; }
        public string Description { get; set; }
    }

}
