@page "/videos"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager navigationManager
@inject HttpClient Http

@using Blazored.Video
@using Blazored.Video.Support
<a href="/user-files?id=@idPars&name=@nameParse">
    <BSButton Size="Size.Small" Color="Color.Primary"><span class="oi oi-arrow-thick-left"></span> Назад</BSButton>
</a>
<br><br>

<h3>Видео пользователя @nameParse</h3>

@if (videoFiles == null)
{
<p><em>Загрузка...</em></p>
}
else
{
    @if (videoFiles.Count > 0)
    {
        <div>
            @foreach (var video in videoFiles)
            {
                <div>
                    <span>Название: <h3 style="text-decoration: underline">@video.File.Title</h3></span>
                    Описасние: <span style="font-style: italic">@video.File.Description</span>
                </div>
                <BlazoredVideo Play="OnPlay"
                               class="w-100"
                               style="max-height: 300px; border: 2px"
                               controls="controls">
                    <source src="https://localhost:5000/@video.File.Path" type="video/mp4"/>
                </BlazoredVideo>
                <div>
                    Характиристики:
                    <ul>
                        <li>Битрейт: @video.Bitrate</li>
                        <li>Разрешение: @video.Resolution</li>
                        <li>Размер: @video.File.Size</li>
                        <li>ID: @video.Id</li>
                    </ul>
                </div>
                <hr/>
                <br/>
            }
        </div>
    }
    else
    {
        <h1>Вы еще не загрузили видео</h1>
    }
}

@code {
    private string idPars;
    private string nameParse;
    private List<VideoFile> videoFiles;

    void OnPlay(VideoState state)
    {
        // var url = state.CurrentSrc;
    // do something with this
    }
    void OnTimeUpdate(VideoState state)
    {
        var url = state.CurrentSrc;
        var currentTime = state.CurrentTime;
    // do something with this
    }
    
    protected override async Task OnInitializedAsync()
    {
        
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
        {
            idPars = id.First();
        }

        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("name", out var name))
        {
            nameParse = name.First();
        }
        
        string url = $"{Program.apiURL}/users/" + idPars + "/video-files";
        
        videoFiles = await Http.GetFromJsonAsync<List<VideoFile>>(url);
    }
    
    
    public class VideoFile
    {
        public Guid Id { get; set; }

        public string Resolution { get; set; }
        
        public int Length { get; set; }
        
        public int Bitrate { get; set; }
        
        public string Encoding { get; set; }
        public UserFiles.File File { get; set; }
    }
    
}